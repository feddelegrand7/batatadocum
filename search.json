{
  "articles": [
    {
      "path": "CODE_OF_CONDUCT.html",
      "author": [],
      "contents": "\r\nContributor Covenant Code of Conduct\r\nOur Pledge\r\nWe as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\r\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\r\nOur Standards\r\nExamples of behavior that contributes to a positive environment for our community include:\r\nDemonstrating empathy and kindness toward other people\r\nBeing respectful of differing opinions, viewpoints, and experiences\r\nGiving and gracefully accepting constructive feedback\r\nAccepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\r\nFocusing on what is best not just for us as individuals, but for the overall community\r\nExamples of unacceptable behavior include:\r\nThe use of sexualized language or imagery, and sexual attention or advances of any kind\r\nTrolling, insulting or derogatory comments, and personal or political attacks\r\nPublic or private harassment\r\nPublishing others’ private information, such as a physical or email address, without their explicit permission\r\nOther conduct which could reasonably be considered inappropriate in a professional setting\r\nEnforcement Responsibilities\r\nCommunity leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\r\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\r\nScope\r\nThis Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\r\nEnforcement\r\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly.\r\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\r\nEnforcement Guidelines\r\nCommunity leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\r\n1. Correction\r\nCommunity Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\r\nConsequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\r\n2. Warning\r\nCommunity Impact: A violation through a single incident or series of actions.\r\nConsequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\r\n3. Temporary Ban\r\nCommunity Impact: A serious violation of community standards, including sustained inappropriate behavior.\r\nConsequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\r\n4. Permanent Ban\r\nCommunity Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.\r\nConsequence: A permanent ban from any sort of public interaction within the community.\r\nAttribution\r\nThis Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html.\r\nCommunity Impact Guidelines were inspired by Mozilla’s code of conduct enforcement ladder.\r\nFor answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https:// www.contributor-covenant.org/translations.\r\n\r\n\r\n",
      "last_modified": "2021-01-22T03:15:21+01:00"
    },
    {
      "path": "index.html",
      "title": "batata",
      "description": "A Toolbox for Managing R Packages Installation and Removal.\n",
      "author": [],
      "contents": "\r\nPackages Removal\r\nfresh_start()\r\nDescription Removes all the installed R packages (including base R) within an installation directory. Particularly useful when moving from an R version to another.\r\nParameters\r\nlib (str): the directory where to remove the packages. Defaults to the first element in .libPaths()\r\ntoday_packages()\r\nDescription Displays all the packages installed the day the function is called.\r\nParameters\r\nlib (str): the directory where to display the packages. Defaults to the first element in .libPaths()\r\n\r\n\r\n\r\nrm_today_packages()\r\nDescription Removes all the packages installed the day the function is called.\r\nParameters:\r\nlib (str): the directory where to remove the packages. Defaults to the first element in .libPaths()\r\nyesterday_packages()\r\nDescription Displays the packages installed yesterday.\r\nParameters:\r\nlib (str): the directory where to display the packages. Defaults to the first element in .libPaths()\r\n\r\n [1] \"batata\"       \"blogdown\"     \"brms\"         \"clisymbols\"  \r\n [5] \"covr\"         \"distill\"      \"dplyr\"        \"gamm4\"       \r\n [9] \"ggplot2\"      \"httr\"         \"janitor\"      \"lintr\"       \r\n[13] \"optimx\"       \"projpred\"     \"rngtools\"     \"savonliquide\"\r\n[17] \"servr\"        \"shiny\"        \"thankr\"       \"xfun\"        \r\n\r\nrm_yesterday_packages()\r\nDescription Removes all the packages installed yesterday.\r\nParameters\r\nlib (str): the directory where to remove the packages. Defaults to the first element in .libPaths()\r\nsince_packages()\r\nDescription Displays the packages installed according to a specific date.\r\nParameters\r\ndate (str): the considered date in yyyy-mm-dd format\r\nposition (str): whether to display the packages installed at that date, before or after that date.\r\nlib (str): the directory where to display the packages. Defaults to the first element in .libPaths()\r\n\r\n [1] \"batata\"       \"blogdown\"     \"brms\"         \"broom\"       \r\n [5] \"clisymbols\"   \"comtradr\"     \"covr\"         \"dbplyr\"      \r\n [9] \"distill\"      \"dplyr\"        \"gamm4\"        \"ggplot2\"     \r\n[13] \"hms\"          \"httr\"         \"janitor\"      \"jsonlite\"    \r\n[17] \"lintr\"        \"lubridate\"    \"mongolite\"    \"optimx\"      \r\n[21] \"pillar\"       \"projpred\"     \"radous\"       \"ralger\"      \r\n[25] \"readr\"        \"rlang\"        \"rngtools\"     \"savonliquide\"\r\n[29] \"servr\"        \"shiny\"        \"thankr\"       \"tibble\"      \r\n[33] \"vctrs\"        \"xfun\"        \r\n\r\nrm_since_packages()\r\nDescription Works similarly to since_packages() excepts that it removes the packages instead of displaying them.\r\nParameters Same as since_packages()\r\nlatest_packages()\r\nDescription Displays the latest installed packages.\r\nParameters\r\nn (num): the number of the last installed packages to display. Default to n = 1, in this case it will return the last installed package.\r\nlib (str): the directory where to display the packages. Defaults to the first element in .libPaths()\r\n\r\n     packages   modification_time\r\n1    blogdown 2021-01-21 21:00:56\r\n2        xfun 2021-01-21 21:00:42\r\n3      batata 2021-01-21 20:26:03\r\n4     ggplot2 2021-01-21 19:47:37\r\n5       dplyr 2021-01-21 17:05:41\r\n6       shiny 2021-01-21 17:05:09\r\n7       lintr 2021-01-21 02:16:07\r\n8        httr 2021-01-21 02:15:42\r\n9        brms 2021-01-21 01:20:13\r\n10 clisymbols 2021-01-21 01:20:13\r\n\r\nrm_latest_packages()\r\nDescription Works similarly to rm_latest_packages() excepts that it removes the packages instead of displaying them.\r\nParameters Same as since_packages()\r\nPackages Installation\r\ninstall_starred_cran()\r\nDescription Installs the latest CRAN-available R packages starred on Github.\r\nParameters\r\ngithub_user (str): the Github user name\r\nn (num): the last n starred repositories. Defaults to 5, in which case the function will look for the last 5 starred repositories, filter R from non-R repos and install them if available on CRAN.\r\nExample The following code chunk will look at the last 10 repositories that I have starred, filter out R repositories, and install them if available on CRAN:\r\n\r\n\r\n\r\nNote that if the starred repo is not available on CRAN, install_starred_cran() will simply ignore it.\r\ninstall_starred_github()\r\nDescription install_starred_github() behaves the same way as install_starred_cran() except that it will install the repositories from Github (not from CRAN), so that you can install packages that are not available on CRAN.\r\nParameters\r\ngithub_user (str): the Github user name\r\nn (num): the last n starred repositories. Defaults to 5, in which case the function will look for the last 5 starred repositories, filter R from non-R repos and install them\r\nupgrade (str): whether to upgrade or not out of date packages. You can choose from ‘always’ or ‘never’. Defaults to ‘never’. For more info, see install_github() from the remote package.\r\nExample The following code chunk will look at the last five repositories that I have starred, extract R repositories (in case some starred repositories belong to another programming language) and install them:\r\n\r\n\r\n\r\ninstall_most_starred()\r\nDescription Allows you the install the most starred CRAN packages that are available on Github. It takes one argument n which specifies the number of the most starred R packages (in descending order) that one wants to install.\r\nParameters\r\nn: the number of most starred CRAN packages (in descending order). Defaults to 10, in which case the function will look at the 10 most starred R repositories and install them if available on CRAN.\r\nExample The following code chunk will look for the 10 most starred R repositories and will install them if available on CRAN. Of course, it will ignore R repositories that are not packages, (e.g R4DS repo):\r\n\r\n\r\n\r\nCode of Conduct\r\nPlease note that the batata project is released with a Contributor Code of Conduct. By contributing to this project, you agree to abide by its terms.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-01-22T03:15:24+01:00"
    }
  ],
  "collections": []
}
